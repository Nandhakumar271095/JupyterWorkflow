{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1970</td>\n",
       "      <td>3399.299037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1971</td>\n",
       "      <td>3768.297935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1972</td>\n",
       "      <td>4251.175484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1973</td>\n",
       "      <td>4804.463248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1974</td>\n",
       "      <td>5576.514583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1975</td>\n",
       "      <td>5998.144346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1976</td>\n",
       "      <td>7062.131392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1977</td>\n",
       "      <td>7100.126170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1978</td>\n",
       "      <td>7247.967035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1979</td>\n",
       "      <td>7602.912681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1980</td>\n",
       "      <td>8355.968120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1981</td>\n",
       "      <td>9434.390652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1982</td>\n",
       "      <td>9619.438377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1983</td>\n",
       "      <td>10416.536590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1984</td>\n",
       "      <td>10790.328720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1985</td>\n",
       "      <td>11018.955850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1986</td>\n",
       "      <td>11482.891530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1987</td>\n",
       "      <td>12974.806620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1988</td>\n",
       "      <td>15080.283450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1989</td>\n",
       "      <td>16426.725480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1990</td>\n",
       "      <td>16838.673200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1991</td>\n",
       "      <td>17266.097690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1992</td>\n",
       "      <td>16412.083090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1993</td>\n",
       "      <td>15875.586730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1994</td>\n",
       "      <td>15755.820270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1995</td>\n",
       "      <td>16369.317250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1996</td>\n",
       "      <td>16699.826680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1997</td>\n",
       "      <td>17310.757750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1998</td>\n",
       "      <td>16622.671870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1999</td>\n",
       "      <td>17581.024140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2000</td>\n",
       "      <td>18987.382410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>2001</td>\n",
       "      <td>18601.397240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2002</td>\n",
       "      <td>19232.175560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2003</td>\n",
       "      <td>22739.426280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2004</td>\n",
       "      <td>25719.147150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>2005</td>\n",
       "      <td>29198.055690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>2006</td>\n",
       "      <td>32738.262900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>2007</td>\n",
       "      <td>36144.481220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>2008</td>\n",
       "      <td>37446.486090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>2009</td>\n",
       "      <td>32755.176820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2010</td>\n",
       "      <td>38420.522890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>2011</td>\n",
       "      <td>42334.711210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>2012</td>\n",
       "      <td>42665.255970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>2013</td>\n",
       "      <td>42676.468370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>2014</td>\n",
       "      <td>41039.893600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>2015</td>\n",
       "      <td>35175.188980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>2016</td>\n",
       "      <td>34229.193630</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    year        income\n",
       "0   1970   3399.299037\n",
       "1   1971   3768.297935\n",
       "2   1972   4251.175484\n",
       "3   1973   4804.463248\n",
       "4   1974   5576.514583\n",
       "5   1975   5998.144346\n",
       "6   1976   7062.131392\n",
       "7   1977   7100.126170\n",
       "8   1978   7247.967035\n",
       "9   1979   7602.912681\n",
       "10  1980   8355.968120\n",
       "11  1981   9434.390652\n",
       "12  1982   9619.438377\n",
       "13  1983  10416.536590\n",
       "14  1984  10790.328720\n",
       "15  1985  11018.955850\n",
       "16  1986  11482.891530\n",
       "17  1987  12974.806620\n",
       "18  1988  15080.283450\n",
       "19  1989  16426.725480\n",
       "20  1990  16838.673200\n",
       "21  1991  17266.097690\n",
       "22  1992  16412.083090\n",
       "23  1993  15875.586730\n",
       "24  1994  15755.820270\n",
       "25  1995  16369.317250\n",
       "26  1996  16699.826680\n",
       "27  1997  17310.757750\n",
       "28  1998  16622.671870\n",
       "29  1999  17581.024140\n",
       "30  2000  18987.382410\n",
       "31  2001  18601.397240\n",
       "32  2002  19232.175560\n",
       "33  2003  22739.426280\n",
       "34  2004  25719.147150\n",
       "35  2005  29198.055690\n",
       "36  2006  32738.262900\n",
       "37  2007  36144.481220\n",
       "38  2008  37446.486090\n",
       "39  2009  32755.176820\n",
       "40  2010  38420.522890\n",
       "41  2011  42334.711210\n",
       "42  2012  42665.255970\n",
       "43  2013  42676.468370\n",
       "44  2014  41039.893600\n",
       "45  2015  35175.188980\n",
       "46  2016  34229.193630"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('canada_per_capita_income.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1482de65fc8>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "plt.xlabel('year')\n",
    "plt.ylabel('income')\n",
    "plt.scatter(df.year,df.income, color='green', marker='*')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg = linear_model.LinearRegression()\n",
    "reg.fit(df[['year']],df.income)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([41288.69409442])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.predict([[2020]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([828.46507522])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1632210.7578554575"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41288.694088942604"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "828.46507522*2020+-1632210.7578554575"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
